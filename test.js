Query {
    _mongooseOptions: {},
    mongooseCollection:
     NativeCollection {
       collection: Collection { s: [Object] },
       opts:
        { bufferCommands: true,
          capped: false,
          '$wasForceClosed': undefined },
       name: 'auctions',
       collectionName: 'auctions',
       conn:
        NativeConnection {
          base: [Mongoose],
          collections: [Object],
          models: [Object],
          config: [Object],
          replica: false,
          hosts: null,
          host: 'localhost',
          port: 27017,
          user: undefined,
          pass: undefined,
          name: 'lelang',
          options: [Object],
          otherDbs: [],
          states: [Object],
          _readyState: 1,
          _closeCalled: false,
          _hasOpened: true,
          _listening: false,
          db: [Db] },
       queue: [],
       buffer: false,
       emitter:
        EventEmitter {
          domain: null,
          _events: {},
          _eventsCount: 0,
          _maxListeners: undefined } },
    model:
     { [Function: model]
       hooks: Kareem { _pres: {}, _posts: {} },
       base:
        Mongoose {
          connections: [Array],
          models: [Object],
          modelSchemas: [Object],
          options: [Object],
          plugins: [Array] },
       modelName: 'Auction',
       model: [Function: model],
       db:
        NativeConnection {
          base: [Mongoose],
          collections: [Object],
          models: [Object],
          config: [Object],
          replica: false,
          hosts: null,
          host: 'localhost',
          port: 27017,
          user: undefined,
          pass: undefined,
          name: 'lelang',
          options: [Object],
          otherDbs: [],
          states: [Object],
          _readyState: 1,
          _closeCalled: false,
          _hasOpened: true,
          _listening: false,
          db: [Db] },
       discriminators: undefined,
       '$appliedMethods': true,
       '$appliedHooks': true,
       _events: { init: [Function], save: [Function] },
       _eventsCount: 2,
       schema:
        Schema {
          obj: [Object],
          paths: [Object],
          aliases: {},
          subpaths: {},
          virtuals: [Object],
          singleNestedPaths: {},
          nested: {},
          inherits: {},
          callQueue: [Array],
          _indexes: [],
          methods: {},
          statics: {},
          tree: [Object],
          query: {},
          childSchemas: [],
          plugins: [Array],
          s: [Object],
          _userProvidedOptions: undefined,
          options: [Object],
          '$globalPluginsApplied': true },
       collection:
        NativeCollection {
          collection: [Collection],
          opts: [Object],
          name: 'auctions',
          collectionName: 'auctions',
          conn: [NativeConnection],
          queue: [],
          buffer: false,
          emitter: [EventEmitter] },
       Query: { [Function] base: [Query] },
       '$__insertMany': [Function],
       insertMany: [Function],
       '$init': Promise { emitter: [EventEmitter], emitted: [Object], ended: false } },
    schema:
     Schema {
       obj:
        { title: [Object],
          description: [Object],
          photo: [Object],
          initialprice: [Object],
          currentprice: [Object],
          start: [Object],
          end: [Object],
          by: [Function],
          winner: [Function],
          status: [Object] },
       paths:
        { title: [SchemaString],
          description: [SchemaString],
          photo: [SchemaString],
          initialprice: [SchemaNumber],
          currentprice: [SchemaNumber],
          start: [SchemaDate],
          end: [SchemaDate],
          by: [ObjectId],
          winner: [ObjectId],
          status: [SchemaString],
          _id: [ObjectId],
          __v: [SchemaNumber] },
       aliases: {},
       subpaths: {},
       virtuals: { id: [VirtualType] },
       singleNestedPaths: {},
       nested: {},
       inherits: {},
       callQueue: [ [Array], [Array], [Array], [Array], [Array], [Array], [Array] ],
       _indexes: [],
       methods: {},
       statics: {},
       tree:
        { title: [Object],
          description: [Object],
          photo: [Object],
          initialprice: [Object],
          currentprice: [Object],
          start: [Object],
          end: [Object],
          by: [Function],
          winner: [Function],
          status: [Object],
          _id: [Object],
          __v: [Function: Number],
          id: [VirtualType] },
       query: {},
       childSchemas: [],
       plugins: [ [Object], [Object], [Object], [Object] ],
       s: { hooks: [Kareem], kareemHooks: [Object] },
       _userProvidedOptions: undefined,
       options:
        { retainKeyOrder: false,
          typeKey: 'type',
          id: true,
          noVirtualId: false,
          _id: true,
          noId: false,
          validateBeforeSave: true,
          read: null,
          shardKey: null,
          autoIndex: null,
          minimize: true,
          discriminatorKey: '__t',
          versionKey: '__v',
          capped: false,
          bufferCommands: true,
          strict: true,
          pluralization: true },
       '$globalPluginsApplied': true },
    op: 'find',
    options: { retainKeyOrder: false },
    _conditions: { by: { '$in': [Array] } },
    _fields: undefined,
    _update: undefined,
    _path: undefined,
    _distinct: undefined,
    _collection:
     NodeCollection {
       collection:
        NativeCollection {
          collection: [Collection],
          opts: [Object],
          name: 'auctions',
          collectionName: 'auctions',
          conn: [NativeConnection],
          queue: [],
          buffer: false,
          emitter: [EventEmitter] },
       collectionName: 'auctions' },
    _traceFunction: undefined,
    _count: [Function],
    _execUpdate: [Function],
    _find: [Function],
    _findOne: [Function],
    _findOneAndRemove: [Function],
    _findOneAndUpdate: [Function],
    _replaceOne: [Function],
    _updateMany: [Function],
    _updateOne: [Function] }